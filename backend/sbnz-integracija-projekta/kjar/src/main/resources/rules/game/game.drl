package game;

import com.ftn.sbnz.model.models.Game;
import com.ftn.sbnz.model.models.AppUser;
import com.ftn.sbnz.model.models.GameScore;
import com.ftn.sbnz.model.models.FriendScore;
import com.ftn.sbnz.model.models.Session;
import com.ftn.sbnz.model.models.Recommendation;
import com.ftn.sbnz.model.models.Purchase;
import com.ftn.sbnz.model.models.Notification;
import com.ftn.sbnz.model.models.enums.RecommendationType;
import com.ftn.sbnz.model.models.enums.SubscriptionType;
import com.ftn.sbnz.model.models.FriendScore;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.List;



rule "povecaj score za zanr"
salience 100
    when
        $user: AppUser()
        $game: Game($user.getFavouriteGenres().contains($game.getGenre()))
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("------------povecaj score za zanr------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " povecan sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(10d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je medju igracevim omiljenim zanrovima");
        System.out.println("-----------------------------------------------------------------");
end

rule "smanji score za nepodudaranje zanra"
salience 100
    when
        $user: AppUser()
        $game: Game(!$user.getFavouriteGenres.contains($game.getGenre()))
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("---------------smanji score za nepodudaranje zanra---------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " smanjen sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(-5d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer nije medju igracevim omiljenim zanrovima");
        System.out.println("-----------------------------------------------------------------");
end

rule "smanji score za los rating"
salience 100
    when
        $user: AppUser()
        $game: Game($game.getRating() < 5)
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("-------------------smanji score za los rating--------------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " smanjen sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(-5d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je igra lose ocenjena");
        System.out.println("-----------------------------------------------------------------");
end


rule "povecaj score ako je igra dobro ocenjenja"
salience 100
    when
        $user: AppUser()
        $game: Game($game.getRating() > 7)
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("------------povecaj score ako je igra dobro ocenjenja------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " povecan sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(10d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je dobro ocenjenja");
        System.out.println("-----------------------------------------------------------------");
end

rule "povecaj score ako je igrica igrana puno u poslednjih nedelju dana"
salience 100
    when
        $user: AppUser()
        $game: Game()
        $sessionNum: Number(intValue > 5) from accumulate(
            $session: Session(game == $game) over window:time(7d),
            count($session)
        )
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
            System.out.println("------------povecaj score ako je igrica igrana puno u poslednjih nedelju dana------------");
            System.out.println("Skor igrice " + $gameScore.getGame().getName() + " povecan sa: " + $gameScore.getScore().toString());
            $gameScore.increaseScore(10d);
            System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je dosta puta igrana");
            System.out.println("-----------------------------------------------------------------");
end

rule "smanji score ako igrica nije igrana puno u poslednjih nedelju dana"
salience 100
    when
        $user: AppUser()
        $game: Game()
        $sessionNum: Number(intValue < 5) from accumulate(
            $session: Session(game == $game) over window:time(7d),
            count($session)
        )
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
            System.out.println("---------smanji score ako igrica nije igrana puno u poslednjih nedelju dana---------");
            System.out.println("Skor igrice " + $gameScore.getGame().getName() + " smanjen sa: " + $gameScore.getScore().toString());
            $gameScore.increaseScore(-10d);
            System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer nije dosta puta igrana");
            System.out.println("-----------------------------------------------------------------");
end


rule "Ako je score igrice u top 10 i njena cena je u donjih 30% dodati BEST_BUY"
    when
        $user: AppUser()
        $game: Game()
        $gameScore: GameScore($user == user && $game == game)

        $spot: Number(intValue < 10) from accumulate(
            $game1Score: GameScore($game != game && $user == user && $gameScore.getScore() < score),
            count($game1Score)
        )

        accumulate(
            $game1: Game(),
            $count: count($game1)
        )

        $numOfGames: Number(intValue < ($count * 30 / 100)) from accumulate(
            $game2: Game(price < $game.getPrice() && $game2 != $game),
            count($game2)
        )
    then
        insert(new Recommendation(RecommendationType.BEST_BUY,"",$user, $game));
        System.out.println("---------Ako je score igrice u top 10 i njena cena je u donjih 30% dodati BEST_BUY---------");
        System.out.println("Igrica: " + $game.getName() + " je dodata u BEST_BUY");
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je score igrice u top 10 i cena igrice manja od trenutnog stanja na korisnikovom balance-u korisnik dobija preporuku YOU_WILL_LIKE"
    when
        $user: AppUser()
        $game: Game($game.getPrice() < $user.getBalance())
        $gameScore: GameScore($user == user && $game == game)

        $spot: Number(intValue < 10) from accumulate(
            $game1Score: GameScore($game != game && $user == user && $gameScore.getScore() < score),
            count($game1Score)
        )
    then
        insert(new Recommendation(RecommendationType.YOU_WILL_LIKE,"",$user, $game));
        System.out.println("Ako je score igrice u top 10 i cena igrice manja od trenutnog stanja na korisnikovom balance-u");
        System.out.println("Igrica: " + $game.getName() + " je dodata u YOU WILL LIKE");
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako igru igra veliki procenat korisnikovih prijatelja korisnik dobija preporuku MOST_FRIENDS_PLAY"
    when
        $user: AppUser()
        $game: Game()
        $numOfFriendsPlaying: Number(intValue > 10) from accumulate(
            $user2 : AppUser($user.getFriends().contains($user2), $user2.getGames().contains($game), $user2 != $user),
            count($user2)
        )
    then
        insert(new Recommendation(RecommendationType.MOST_FRIENDS_PLAY,"",$user, $game));
        System.out.println("Ako igru igra veliki procenat korisnikovih prijatelja");
        System.out.println("Igrica: " + $game.getName() + " je dodata u MOST FRIENDS PLAY");
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je ocena igre u top 10 za free to play igre i igra je free to play korisnik dobija preporuku BEST_FREE_TO_PLAY"
    when
        $game: Game(price == 0)
        $user: AppUser()
        $gameRanking: Number(intValue < 10) from accumulate (
            $game2 : Game(price == 0, rating > $game.getRating()),
            count($game2)
        )
    then
            insert(new Recommendation(RecommendationType.BEST_FREE_TO_PLAY,"",$user, $game));
            System.out.println("Ako je ocena igre u top 10 za free to play igre i igra je free to play");
            System.out.println("Igrica: " + $game.getName() + " je dodata u BEST FREE TO PLAY");
            System.out.println("-----------------------------------------------------------------");
end

rule "Ako je ocena igre u top 10 ocena dodaj u BEST_RATED"
     when
            $game: Game()
            $user: AppUser()
            $gameRanking: Number(intValue < 10) from accumulate (
                $game2 : Game(rating > $game.getRating()),
                count($game2)
            )
    then
            insert(new Recommendation(RecommendationType.BEST_RATED,"",$user, $game));
            System.out.println("Ako je ocena igre u top 10 ocena dodaj u BEST_RATED");
            System.out.println("Igrica: " + $game.getName() + " je dodata u BEST_RATED");
            System.out.println("-----------------------------------------------------------------");
end

rule "Ako je vreme igranja u poslednjih 7 dana manje od proseƒçnog vremena igranja za tog korisnika"
    when
        $user: AppUser()
        accumulate(
            $session: Session($user == user),
            $avgPlaytime: average($session.getDuration())
        )
        $lastWeekPlaytimeAvg: Number(intValue < $avgPlaytime) from accumulate(
            $session: Session($user == user) over window:time(7d),
            average($session.getDuration())
        )
    then
        System.out.println("Ako je vreme igranja u poslednjih 7 dana manje od proseƒçnog vremena igranja za tog korisnika");
        System.out.println("Igrice za korisnika " + $user.getUsername() + " imaju 10% popusta");
        System.out.println($avgPlaytime);
        System.out.println($lastWeekPlaytimeAvg);
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je igraƒç kupio igricu koju njegovi prijatelji igraju obavesti prijatelje"
    when
        $purchase: Purchase($user : user)
        $friend: AppUser($friend != $user && $user.getFriends().contains($friend) && $friend.getGames().contains($purchase.getGame()))
    then
        System.out.println("Ako je igraƒç kupio igricu koju njegovi prijatelji igraju obavesti prijatelje");
        System.out.println($friend.getUsername() + " je dobio notifikaciju za igru " + $purchase.getGame().getName());
        insert(new Notification("Friend bought the game", $user.getUsername() + " bought " + $purchase.getGame(), $friend));
        System.out.println("-----------------------------------------------------------------");
end


rule "Ako je iza≈°la igrica sa korisnikovog wishlista i korisnik ima dovoljno kredita na balance-u obavesti korisnika"
    when
        $user : AppUser()
        $game : Game($user.getWishlist().contains($game) && $user.getBalance() > price && releaseDate.isBefore(LocalDateTime.now()))
    then
        System.out.println("Ako je iza≈°la igrica sa korisnikovog wishlista i korisnik ima dovoljno kredita na balance-u obavesti korisnika");
        System.out.println($user.getUsername() + " je dobio notifikaciju za igru " + $game.getName());
        insert(new Notification("Game got released", $game.getName() + " is out now and you have enough money to purchase it", $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako igraƒç nije igrao igricu mesec dana dodaj u unfinished"
    when
        $user : AppUser()
        $game : Game()
        $numOfSessions: Number(intValue == 0) from accumulate(
            $session : Session($user == user && $game == game) over window:time(30d),
            count($session)
        )
    then
        insert(new Recommendation(RecommendationType.UNFINISHED,"",$user, $game));
        System.out.println("Ako igraƒç nije igrao igricu mesec dana dodaj u unfinished");
        System.out.println("Igrica: " + $game.getName() + " je dodata u UNFINISHED za usera: " + $user.getUsername());
        System.out.println("-----------------------------------------------------------------");
end


rule "Obavesti korisnika ako igrica na korisnikovom wishlistu ode na sale"
    when
        $user : AppUser()
        $game : Game($user.getWishlist().contains($game) && onSale != 0 && saleEndDate != null && LocalDateTime.now().isBefore(saleEndDate))
    then
        System.out.println("Obavesti korisnika ako igrica na korisnikovom wishlistu ode na sale");
        System.out.println($user.getUsername() + " je dobio notifikaciju za igru " + $game.getName() + " da je na sale od " + $game.getOnSale());
        insert(new Notification("Igrica je na popustu", $game.getName() + " je na popustu od " + $game.getOnSale(), $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako korisnik ima subscription type veƒái od BRONZE i korisnik je dodao igru na wishlistu i igra otvori open betu"
    when
        $user : AppUser(subscriptionType != null && subscriptionType != SubscriptionType.BRONZE)
        $game : Game($user.getWishlist().contains($game) && beta == true && betaReleaseDate != null && LocalDateTime.now().isAfter(betaReleaseDate))
    then
        System.out.println("Ako korisnik ima subscription type veƒái od BRONZE i korisnik je dodao igru na wishlistu i igra otvori open betu");
        System.out.println($user.getUsername() + " je dobio notifikaciju za igru " + $game.getName() + " da je otvorena beta od " + $game.getBetaReleaseDate());
        insert(new Notification("Dodati ste kao kandidat za betu za igricu", $game.getName() + " je otvorila betu od " + $game.getBetaReleaseDate(), $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako korisnik ima subscription type veƒái od SILVERA i korisnik je dodao igru na wishlistu i igra otvori open betu"
    when
        $user : AppUser(subscriptionType != null && subscriptionType != SubscriptionType.BRONZE && subscriptionType != SubscriptionType.SILVER)
        $game : Game($user.getWishlist().contains($game) && beta == true && betaReleaseDate != null && LocalDateTime.now().isAfter(betaReleaseDate))
    then
        System.out.println("Ako korisnik ima subscription type veƒái od SILVERA i korisnik je dodao igru na wishlistu i igra otvori open betu");
        System.out.println($user.getUsername() + " je dobio notifikaciju i kljuc za igru " + $game.getName() + " da je otvorena beta od " + $game.getBetaReleaseDate());
        insert(new Notification("Dobili ste kljuc za betu za igricu", $game.getName() + " je otvorila betu od " + $game.getBetaReleaseDate(), $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je igrica u korisnikovom wishlistu otvorila open betu i korisnik nema subscription ponudi popust na subscription"
    when
        $user : AppUser(subscriptionType == null)
        $game : Game($user.getWishlist().contains($game) && beta == true && betaReleaseDate != null && LocalDateTime.now().isAfter(betaReleaseDate))
    then
        System.out.println("Ako je igrica u korisnikovom wishlistu otvorila open betu i korisnik nema subscription ponudi popust na subscription");
        System.out.println($user.getUsername() + " je dobio notifikaciju za popust na subscription");
        insert(new Notification("Dobili ste popust na subscription", $game.getName() + " je otvorila betu od " + $game.getBetaReleaseDate(), $user));
        System.out.println("-----------------------------------------------------------------");
end







rule "Ako trenutni korisnik i neki drugi korisnik imaju iste omiljene ≈æanrove"
no-loop true
    when
        $user : AppUser()
        $user1 : AppUser($user != $user1)
        $score : FriendScore(user == $user && friendRecommendation == $user1 && $user.getFavouriteGenres().containsAll($user1.getFavouriteGenres()) && $user1.getFavouriteGenres().containsAll($user.getFavouriteGenres()))
    then
        modify($score){
            setScore($score.getScore() + 10)
        }

        System.out.println("Ako trenutni korisnik i neki drugi korisnik imaju iste omiljene ≈æanrove");
        System.out.println($score.getUser().getUsername() + " povecano za prijatelja " + $score.getFriendRecommendation().getUsername() + " i sad je: " + $score.getScore());
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako trenutni korisnik i neki drugi korisnik nemaju iste omiljene ≈æanrove"
no-loop true
    when
        $user : AppUser()
        $user1 : AppUser($user != $user1)
        $score : FriendScore(user == $user && friendRecommendation == $user1 && !($user.getFavouriteGenres().containsAll($user1.getFavouriteGenres())) && !($user1.getFavouriteGenres().containsAll($user.getFavouriteGenres())))
    then
        modify($score){
            setScore($score.getScore() - 10)
        }

        System.out.println("Ako trenutni korisnik i neki drugi korisnik nemaju iste omiljene ≈æanrove");
        System.out.println($score.getUser().getUsername() + " smanjeno za prijatelja " + $score.getFriendRecommendation().getUsername() + " i sad je: " + $score.getScore());
        System.out.println("-----------------------------------------------------------------");
end

/*

rule "Ako se vremenska zona trenutnog i drugog korisnika ne razlikuje za vi≈°e od 4h"
no-loop true
    when
        $user : AppUser()
        $user1 : AppUser(username != $user.getUsername())
        $score : FriendScore(user == $user && friendRecommendation == $user1 && Math.abs(Integer.parseInt($user.getTimezone()) - Integer.parseInt($user1.getTimezone())) < 4)
    then
        modify($score){
            setScore($score.getScore() + 15)
        }

        System.out.println("Ako se vremenska zona trenutnog i drugog korisnika ne razlikuje za vi≈°e od 4h");
        System.out.println($score.getUser().getUsername() + " povecano za prijatelja " + $score.getFriendRecommendation().getUsername() + " i sad je: " + $score.getScore());
        System.out.println("-----------------------------------------------------------------");
end

*/

rule "Ako je korisnik prijatelj sa prijateljima trenutnog korisnika"
no-loop true
    when
        $user : AppUser()
        $user1 : AppUser(friends.containsAll($user.getFriends()) && !($user.getFriends().contains($user1)))
        $score : FriendScore(user == $user && friendRecommendation == $user1)
    then
        modify($score){
            setScore($score.getScore() + 15)
        }

        System.out.println("Ako je korisnik prijatelj sa prijateljima trenutnog korisnika");
        System.out.println($score.getUser().getUsername() + " povecano za prijatelja " + $score.getFriendRecommendation().getUsername() + " i sad je: " + $score.getScore());
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je korisnik u top 10 korisnika po score-u i korisnik ima mesta u prijateljima"
    when
        $user : AppUser(friends.size() < 6)
        $friend : AppUser($friend != $user)
        $friendScore : FriendScore(user == $friend)
        $numOfScores: Number(intValue < 10) from accumulate(
            $score : FriendScore(score < $friendScore.getScore()),
            count($score)
        )
    then
        System.out.println("Ako je korisnik u top 10 korisnika po score-u i korisnik ima mesta u prijateljima");
        System.out.println($user.getUsername() + " je dobio notifikaciju za novog prijatelja");
        insert(new Notification("Preporuka za prijatelja", $friend.getUsername() + " je preporucen", $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako se trenutni korisnik pribli≈æio gornjem limitu prijatelja i zadnja odigrana sesija je bila pre vi≈°e od 2 meseca"
    when
        $user : AppUser()
        $friend : AppUser($friend != $user && friends.size() == 4 && $user.getFriends().contains($friend))
        $numOfSessions: Number(intValue == 0) from accumulate(
            $session : Session(user == $friend) over window:time(60d),
            count($session)
        )
    then
        System.out.println("Ako se trenutni korisnik pribli≈æio gornjem limitu prijatelja i zadnja odigrana sesija je bila pre vi≈°e od 2 meseca");
        System.out.println($user.getUsername() + " je dobio notifikaciju za izbacivanje prijatelja");
        insert(new Notification("Preporuka za izbacivanje prijatelja", $friend.getUsername() + " je preporucen za izbacivanje", $user));
        System.out.println("-----------------------------------------------------------------");
end





















rule "Ako je korisnik u poslednja 3 dana imao vi≈°e od 25 sati igranja i u poslednjih 10 dana kupio vise od 5 igrica i ni jedna od kupljenih igrica nije na onSale, poveƒáati SubscriptionType"
    when
        $user : AppUser()
        $totalDuration: Number(intValue != 0) from accumulate(
            $session : Session($user == user) over window:time(3d),
            sum($session.getDuration())
        )
        $totalPurchases: Number(intValue != 0) from accumulate(
            $purchase : Purchase($user == user && game.getOnSale() == 0) over window:time(10d),
            count($purchase)
        )
    then
        SubscriptionType subType = null;
        if ($user.getSubscriptionType() == null)
            subType = SubscriptionType.BRONZE;
        else if ($user.getSubscriptionType() == SubscriptionType.BRONZE)
            subType = SubscriptionType.SILVER;
        else if ($user.getSubscriptionType() == SubscriptionType.SILVER)
            subType = SubscriptionType.GOLD;
        else if ($user.getSubscriptionType() == SubscriptionType.GOLD)
            subType = SubscriptionType.PLATINUM;

        modify($user){
            setSubscriptionType(subType)
        }

        System.out.println("duration je: " + $totalDuration + ", broj kupovina je: " + $totalPurchases + " za " + $user.getUsername());
        System.out.println("Ako je korisnik u poslednja 3 dana imao vi≈°e od 25 sati igranja i u poslednjih 10 dana kupio vise od 5 igrica i ni jedna od kupljenih igrica nije na onSale, poveƒáati SubscriptionType");
        System.out.println("Korisniku: " + $user.getUsername() + " je povecan sub type i sad je: " + $user.getSubscriptionType());
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je balance korisnika veƒái od proseƒçne cene igrice koja je istog ≈æanra kao i igrica koju je najvi≈°e igrao u poslednjih 10 dana, poveƒáaj score svih igrica tog ≈æanra ƒçija je cena manja od proseƒçne cene"
    when
        $user : AppUser()
        $sessions : List() from collect(
            $session : Session($user == user) over window:time(10d)
        )
        $games : List() from collect(
            $game : Game()
        )
        $gameScore : GameScore()
    then
        HashMap<Game, Integer> map = new HashMap<>();
        for (Object s : $sessions) {
          Session session = (Session) s;
          if (map.containsKey(session.getGame()))
              map.put(session.getGame(), map.get(session.getGame()) + session.getDuration());
          else {
              map.put(session.getGame(), session.getDuration());
          }
        }

        Game mostPlayedGame = null;
        Integer time = 0;
        for (Map.Entry<Game, Integer> entry : map.entrySet()) {
          Game game = entry.getKey();
          Integer timeForGame = entry.getValue();

          if (timeForGame > time) {
              mostPlayedGame = game;
              time = timeForGame;
          }
        }

        if (mostPlayedGame != null) {
            String mostPlayedGenre = mostPlayedGame.getGenre();
            double avgPriceOfGenre = 0;

            for (Object g : $games) {
                Game game = (Game) g;
                if (game.getGenre() == mostPlayedGenre)
                    avgPriceOfGenre += game.getPrice();
            }
            avgPriceOfGenre = avgPriceOfGenre / Double.valueOf($games.size());

            if ($user.getBalance() > avgPriceOfGenre && $gameScore.getGame().getGenre() == mostPlayedGenre && $gameScore.getGame().getPrice() < avgPriceOfGenre) {
                modify($gameScore) {
                    setScore($gameScore.getScore() + 5)
                }
            }
        }

        System.out.println("tralala");
        System.out.println("Ako je balance korisnika veƒái od proseƒçne cene igrice koja je istog ≈æanra kao i igrica koju je najvi≈°e igrao u poslednjih 10 dana, poveƒáaj score svih igrica tog ≈æanra ƒçija je cena manja od proseƒçne cene");
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je neka igrica u poslednja 3 dana kupljena vi≈°e od 5 puta, poveƒáati onSale za 10"
    when
        $game : Game()
        $numOfPurchases: Number(intValue > 5) from accumulate(
            $purchase : Purchase($game == game) over window:time(3d),
            count($purchase)
        )
    then
        modify($game){
            setOnSale($game.getOnSale() + 10)
        }
        System.out.println("num je: " + $numOfPurchases + " za " + $game.getName());
        System.out.println("Ako je neka igrica u poslednja 3 dana kupljena vi≈°e od 5 puta, poveƒáati onSale za 10");
        System.out.println("Igrici: " + $game.getName() + " je povecan onSale za 10 i sad je: " + $game.getOnSale());
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako korisnik nema sesije u poslednjih 30 dana, smanji SubscriptionType"
    when
        $user : AppUser()
        $numOfSessions: Number(intValue == 0) from accumulate(
            $session : Session($user == user) over window:time(30d),
            count($session)
        )
    then
        SubscriptionType subType = null;
        if ($user.getSubscriptionType() == SubscriptionType.BRONZE)
            subType = null;
        else if ($user.getSubscriptionType() == SubscriptionType.SILVER)
            subType = SubscriptionType.BRONZE;
        else if ($user.getSubscriptionType() == SubscriptionType.GOLD)
            subType = SubscriptionType.SILVER;
        else if ($user.getSubscriptionType() == SubscriptionType.PLATINUM)
            subType = SubscriptionType.GOLD;

        modify($user){
            setSubscriptionType(subType)
        }

        System.out.println("num je: " + $numOfSessions + " za " + $user.getUsername());
        System.out.println("Ako korisnik nema sesije u poslednjih 30 dana, smanji SubscriptionType");
        System.out.println("Korisniku: " + $user.getUsername() + " je smanjen sub type i sad je: " + $user.getSubscriptionType());
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako trenutni korisnik i neki drugi korisnik imaju najvi≈°e sati provedenih na istoj igri poveƒáaj score tog korisnika"
no-loop true
    when
        $user : AppUser()
        $friend : AppUser($user != $friend)
        $friendScore : FriendScore($user == user && $friend == friendRecommendation)

        $userSessions : List() from collect(
            $session : Session($user == user) over window:time(10d)
        )

        $friendSessions : List() from collect(
            $session : Session($friend == user) over window:time(10d)
        )

    then
        HashMap<Game, Integer> map = new HashMap<>();
        for (Object s : $userSessions) {
          Session session = (Session) s;
          if (map.containsKey(session.getGame()))
              map.put(session.getGame(), map.get(session.getGame()) + session.getDuration());
          else {
              map.put(session.getGame(), session.getDuration());
          }
        }

        Game mostPlayedGame = null;
        Integer time = 0;
        for (Map.Entry<Game, Integer> entry : map.entrySet()) {
          Game game = entry.getKey();
          Integer timeForGame = entry.getValue();

          if (timeForGame > time) {
              mostPlayedGame = game;
              time = timeForGame;
          }
        }

        HashMap<Game, Integer> friendMap = new HashMap<>();
        for (Object s : $friendSessions) {
          Session session = (Session) s;
          if (friendMap.containsKey(session.getGame()))
              friendMap.put(session.getGame(), friendMap.get(session.getGame()) + session.getDuration());
          else {
              friendMap.put(session.getGame(), session.getDuration());
          }
        }

        Game friendsMostPlayedGame = null;
        time = 0;
        for (Map.Entry<Game, Integer> entry : friendMap.entrySet()) {
          Game game = entry.getKey();
          Integer timeForGame = entry.getValue();

          if (timeForGame > time) {
              friendsMostPlayedGame = game;
              time = timeForGame;
          }
        }
        System.out.println("Ako trenutni korisnik i neki drugi korisnik imaju najvi≈°e sati provedenih na istoj igri poveƒáaj score tog korisnika");
        if(mostPlayedGame != null && friendsMostPlayedGame != null && mostPlayedGame.getName() == friendsMostPlayedGame.getName()){
            modify($friendScore){
                updateScore(10d)
            }
            System.out.println($user.getUsername() + " i " + $friend.getUsername() + " su najvise igrali: " + mostPlayedGame.getName());
        }

        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je igrica BEST_BUY i na sale-u je jo≈° manje od 24h obavesti korisnika"
    when
        $recommendation : Recommendation(type == RecommendationType.BEST_BUY && game.getOnSale() != 0 && LocalDateTime.now().minusHours(24).isBefore(game.getSaleEndDate()))
    then
        insert(new Notification("Game is on sale for less than 24h", $recommendation.getUser().getUsername() + " got a notification about the game " + $recommendation.getGame().getName(), $recommendation.getUser()));
end


//rule "Ako se vremenska zona korisnika razlikuje od trenutnog korisnika za <2h/<4h/<6h/<8h/>8h i korisnik ima manje od 20/15/10/8/6 prijatelja, smanji score korisnika za 10/30/60/100/200"
//    when
//        $user : AppUser(subscriptionType == SubscriptionType.BRONZE)
//        $totalAmount: Number(doubleValue > 100) from accumulate(
//            $purchase : Purchase($user == user) over window:time(10d),
//            count($purchase)
//        )
//    then
//        System.out.println("pravilo");
//        insert(new Notification("Ostvarujes popust", "Ostvarujes popust od 50% na kupovinu igre", $user));
//        System.out.println("-----------------------------------------------------------------");
//end

//rule "Ako se vremenska zona korisnika razlikuje od trenutnog korisnika za <2h/<4h/<6h/<8h/>8h i korisnik ima manje od 20/15/10/8/6 prijatelja, smanji score korisnika za 10/30/60/100/200"
//    when
//        $user1 : AppUser()
//        $user2 : AppUser($user1 != $user2 && friends.size() < 20 && Math.abs(Integer.parseInt($user1.getTimezone()) - Integer.parseInt($user2.getTimezone())) < 4)
//        $friendScore : FriendScore(user == $user1 && friendRecommendation == $user2)
//    then
//        modify($friendScore){
//            setScore($friendScore.getScore() - 10)
//        }
//
//        System.out.println("pravilo");
//        System.out.println("-----------------------------------------------------------------");
//end
