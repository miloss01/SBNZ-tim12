package game;

import com.ftn.sbnz.model.models.Game;
import com.ftn.sbnz.model.models.AppUser;
import com.ftn.sbnz.model.models.GameScore;
import com.ftn.sbnz.model.models.Session;
import com.ftn.sbnz.model.models.Recommendation;
import com.ftn.sbnz.model.models.Purchase;
import com.ftn.sbnz.model.models.Notification;
import com.ftn.sbnz.model.models.enums.RecommendationType;
import com.ftn.sbnz.model.models.enums.SubscriptionType;
import java.time.LocalDateTime;




rule "povecaj score za zanr"
    when
        $user: AppUser()
        $game: Game($user.getFavouriteGenres().contains($game.getGenre()))
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("------------povecaj score za zanr------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " povecan sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(10d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je medju igracevim omiljenim zanrovima");
        System.out.println("-----------------------------------------------------------------");
end

rule "smanji score za nepodudaranje zanra"
    when
        $user: AppUser()
        $game: Game(!$user.getFavouriteGenres.contains($game.getGenre()))
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("---------------smanji score za nepodudaranje zanra---------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " smanjen sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(-5d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer nije medju igracevim omiljenim zanrovima");
        System.out.println("-----------------------------------------------------------------");
end

rule "smanji score za los rating"
    when
        $user: AppUser()
        $game: Game($game.getRating() < 5)
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("-------------------smanji score za los rating--------------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " smanjen sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(-5d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je igra lose ocenjena");
        System.out.println("-----------------------------------------------------------------");
end


rule "povecaj score ako je igra dobro ocenjenja"
    when
        $user: AppUser()
        $game: Game($game.getRating() > 7)
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
        System.out.println("------------povecaj score ako je igra dobro ocenjenja------------");
        System.out.println("Skor igrice " + $gameScore.getGame().getName() + " povecan sa: " + $gameScore.getScore().toString());
        $gameScore.increaseScore(10d);
        System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je dobro ocenjenja");
        System.out.println("-----------------------------------------------------------------");
end

rule "povecaj score ako je igrica igrana puno u poslednjih nedelju dana"
    when
        $user: AppUser()
        $game: Game()
        $sessionNum: Number(intValue > 5) from accumulate(
            $session: Session(game == $game) over window:time(7d),
            count($session)
        )
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
            System.out.println("------------povecaj score ako je igrica igrana puno u poslednjih nedelju dana------------");
            System.out.println("Skor igrice " + $gameScore.getGame().getName() + " povecan sa: " + $gameScore.getScore().toString());
            $gameScore.increaseScore(10d);
            System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer je dosta puta igrana");
            System.out.println("-----------------------------------------------------------------");
end

rule "smanji score ako igrica nije igrana puno u poslednjih nedelju dana"
    when
        $user: AppUser()
        $game: Game()
        $sessionNum: Number(intValue < 5) from accumulate(
            $session: Session(game == $game) over window:time(7d),
            count($session)
        )
        $gameScore: GameScore($user == $gameScore.getUser() && $game == $gameScore.getGame())
    then
            System.out.println("---------smanji score ako igrica nije igrana puno u poslednjih nedelju dana---------");
            System.out.println("Skor igrice " + $gameScore.getGame().getName() + " smanjen sa: " + $gameScore.getScore().toString());
            $gameScore.increaseScore(-10d);
            System.out.println("Na: " + $gameScore.getScore().toString() + " za igraca " + $user.getUsername() + " jer nije dosta puta igrana");
            System.out.println("-----------------------------------------------------------------");
end


rule "Ako je score igrice u top 10 i njena cena je u donjih 30% dodati BEST_BUY"
salience -1
    when
        $user: AppUser()
        $game: Game()
        $gameScore: GameScore($user == user && $game == game)

        $spot: Number(intValue < 10) from accumulate(
            $game1Score: GameScore($game != game && $user == user && $gameScore.getScore() < score),
            count($game1Score)
        )

        accumulate(
            $game1: Game(),
            $count: count($game1)
        )

        $numOfGames: Number(intValue < ($count * 30 / 100)) from accumulate(
            $game2: Game(price < $game.getPrice() && $game2 != $game),
            count($game2)
        )
    then
        insert(new Recommendation(RecommendationType.BEST_BUY,"",$user, $game));
        System.out.println("---------Ako je score igrice u top 10 i njena cena je u donjih 30% dodati BEST_BUY---------");
        System.out.println("Igrica: " + $game.getName() + " je dodata u BEST_BUY");
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je score igrice u top 10 i cena igrice manja od trenutnog stanja na korisnikovom balance-u korisnik dobija preporuku YOU_WILL_LIKE"
salience -1
    when
        $user: AppUser()
        $game: Game($game.getPrice() < $user.getBalance())
        $gameScore: GameScore($user == user && $game == game)

        $spot: Number(intValue < 10) from accumulate(
            $game1Score: GameScore($game != game && $user == user && $gameScore.getScore() < score),
            count($game1Score)
        )
    then
        insert(new Recommendation(RecommendationType.YOU_WILL_LIKE,"",$user, $game));
        System.out.println("Ako je score igrice u top 10 i cena igrice manja od trenutnog stanja na korisnikovom balance-u");
        System.out.println("Igrica: " + $game.getName() + " je dodata u YOU WILL LIKE");
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako igru igra veliki procenat korisnikovih prijatelja korisnik dobija preporuku MOST_FRIENDS_PLAY"
salience -1
    when
        $user: AppUser()
        $game: Game()
        $numOfFriendsPlaying: Number(intValue > 10) from accumulate(
            $user2 : AppUser($user.getFriends().contains($user2), $user2.getGames().contains($game), $user2 != $user),
            count($user2)
        )
    then
        insert(new Recommendation(RecommendationType.MOST_FRIENDS_PLAY,"",$user, $game));
        System.out.println("Ako igru igra veliki procenat korisnikovih prijatelja");
        System.out.println("Igrica: " + $game.getName() + " je dodata u MOST FRIENDS PLAY");
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je ocena igre u top 10 za free to play igre i igra je free to play korisnik dobija preporuku BEST_FREE_TO_PLAY"
    when
        $game: Game(price == 0)
        $user: AppUser()
        $gameRanking: Number(intValue < 10) from accumulate (
            $game2 : Game(price == 0, rating > $game.getRating()),
            count($game2)
        )
    then
            insert(new Recommendation(RecommendationType.BEST_FREE_TO_PLAY,"",$user, $game));
            System.out.println("Ako je ocena igre u top 10 za free to play igre i igra je free to play");
            System.out.println("Igrica: " + $game.getName() + " je dodata u BEST FREE TO PLAY");
            System.out.println("-----------------------------------------------------------------");
end

rule "Ako je ocena igre u top 10 ocena dodaj u BEST_RATED"
     when
            $game: Game()
            $user: AppUser()
            $gameRanking: Number(intValue < 10) from accumulate (
                $game2 : Game(rating > $game.getRating()),
                count($game2)
            )
    then
            insert(new Recommendation(RecommendationType.BEST_RATED,"",$user, $game));
            System.out.println("Ako je ocena igre u top 10 ocena dodaj u BEST_RATED");
            System.out.println("Igrica: " + $game.getName() + " je dodata u BEST_RATED");
            System.out.println("-----------------------------------------------------------------");
end

rule "Ako je vreme igranja u poslednjih 7 dana manje od proseƒçnog vremena igranja za tog korisnika"
    when
        $user: AppUser()
        accumulate(
            $session: Session($user == user),
            $avgPlaytime: average($session.getDuration())
        )
        $lastWeekPlaytimeAvg: Number(intValue < $avgPlaytime) from accumulate(
            $session: Session($user == user) over window:time(7d),
            average($session.getDuration())
        )
    then
        System.out.println("Ako je vreme igranja u poslednjih 7 dana manje od proseƒçnog vremena igranja za tog korisnika");
        System.out.println("Igrice za korisnika " + $user.getUsername() + " imaju 10% popusta");
        System.out.println($avgPlaytime);
        System.out.println($lastWeekPlaytimeAvg);
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je igraƒç kupio igricu koju njegovi prijatelji igraju obavesti prijatelje"
    when
        $purchase: Purchase($user : user)
        $friend: AppUser($friend != $user && $user.getFriends().contains($friend) && $friend.getGames().contains($purchase.getGame()))
    then
        System.out.println("Ako je igraƒç kupio igricu koju njegovi prijatelji igraju obavesti prijatelje");
        System.out.println($friend.getUsername() + " je dobio notifikaciju za igru " + $purchase.getGame().getName());
        insert(new Notification("Friend bought the game", $user.getUsername() + " bought " + $purchase.getGame(), $friend));
        System.out.println("-----------------------------------------------------------------");
end


rule "Ako je iza≈°la igrica sa korisnikovog wishlista i korisnik ima dovoljno kredita na balance-u obavesti korisnika"
    when
        $user : AppUser()
        $game : Game($user.getWishlist().contains($game) && $user.getBalance() > price && releaseDate.isBefore(LocalDateTime.now()))
    then
        System.out.println("Ako je iza≈°la igrica sa korisnikovog wishlista i korisnik ima dovoljno kredita na balance-u obavesti korisnika");
        System.out.println($user.getUsername() + " je dobio notifikaciju za igru " + $game.getName());
        insert(new Notification("Game got released", $game.getName() + " is out now and you have enough money to purchase it", $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako igraƒç nije igrao igricu mesec dana dodaj u unfinished"
    when
        $user : AppUser()
        $game : Game()
        $numOfSessions: Number(intValue == 0) from accumulate(
            $session : Session($user == user && $game == game) over window:time(30d),
            count($session)
        )
    then
        insert(new Recommendation(RecommendationType.UNFINISHED,"",$user, $game));
        System.out.println("Ako igraƒç nije igrao igricu mesec dana dodaj u unfinished");
        System.out.println("Igrica: " + $game.getName() + " je dodata u UNFINISHED za usera: " + $user.getUsername());
        System.out.println("-----------------------------------------------------------------");
end


rule "Obavesti korisnika ako igrica na korisnikovom wishlistu ode na sale"
    when
        $user : AppUser()
        $game : Game($user.getWishlist().contains($game) && onSale != 0 && saleEndDate != null && LocalDateTime.now().isBefore(saleEndDate))
    then
        System.out.println("Obavesti korisnika ako igrica na korisnikovom wishlistu ode na sale");
        System.out.println($user.getUsername() + " je dobio notifikaciju za igru " + $game.getName() + " da je na sale od " + $game.getOnSale());
        insert(new Notification("Igrica je na popustu", $game.getName() + " je na popustu od " + $game.getOnSale(), $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako korisnik ima subscription type veƒái od BRONZE i korisnik je dodao igru na wishlistu i igra otvori open betu"
    when
        $user : AppUser(subscriptionType != null && subscriptionType != SubscriptionType.BRONZE)
        $game : Game($user.getWishlist().contains($game) && beta == true && betaReleaseDate != null && LocalDateTime.now().isAfter(betaReleaseDate))
    then
        System.out.println("Ako korisnik ima subscription type veƒái od BRONZE i korisnik je dodao igru na wishlistu i igra otvori open betu");
        System.out.println($user.getUsername() + " je dobio notifikaciju za igru " + $game.getName() + " da je otvorena beta od " + $game.getBetaReleaseDate());
        insert(new Notification("Dodati ste kao kandidat za betu za igricu", $game.getName() + " je otvorila betu od " + $game.getBetaReleaseDate(), $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako korisnik ima subscription type veƒái od SILVERA i korisnik je dodao igru na wishlistu i igra otvori open betu"
    when
        $user : AppUser(subscriptionType != null && subscriptionType != SubscriptionType.BRONZE && subscriptionType != SubscriptionType.SILVER)
        $game : Game($user.getWishlist().contains($game) && beta == true && betaReleaseDate != null && LocalDateTime.now().isAfter(betaReleaseDate))
    then
        System.out.println("Ako korisnik ima subscription type veƒái od SILVERA i korisnik je dodao igru na wishlistu i igra otvori open betu");
        System.out.println($user.getUsername() + " je dobio notifikaciju i kljuc za igru " + $game.getName() + " da je otvorena beta od " + $game.getBetaReleaseDate());
        insert(new Notification("Dobili ste kljuc za betu za igricu", $game.getName() + " je otvorila betu od " + $game.getBetaReleaseDate(), $user));
        System.out.println("-----------------------------------------------------------------");
end

rule "Ako je igrica u korisnikovom wishlistu otvorila open betu i korisnik nema subscription ponudi popust na subscription"
    when
        $user : AppUser(subscriptionType == null)
        $game : Game($user.getWishlist().contains($game) && beta == true && betaReleaseDate != null && LocalDateTime.now().isAfter(betaReleaseDate))
    then
        System.out.println("Ako je igrica u korisnikovom wishlistu otvorila open betu i korisnik nema subscription ponudi popust na subscription");
        System.out.println($user.getUsername() + " je dobio notifikaciju za popust na subscription");
        insert(new Notification("Dobili ste popust na subscription", $game.getName() + " je otvorila betu od " + $game.getBetaReleaseDate(), $user));
        System.out.println("-----------------------------------------------------------------");
end